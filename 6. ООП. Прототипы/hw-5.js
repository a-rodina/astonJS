// Базовый:

// 1. Перечислить какие бывают алгоритмы сортировок?

// Пузырьковая сортировка. Выполняет итерации по списку, сравнивая элементы попарно и меняя их местами. 
// Таким образом элементы с большими значениями оказываются в конце списка, а с меньшими остаются в начале. 

// Сортировка вставками. Делит массив на две части: отсортированную и общую. В начале выполнения алгоритма считается, что первый элемент массива уже стоит на своём месте. 
// Поэтому массив начинают рассматривать со второго элемента и продолжают так до тех пор, пока все элементы в отсортированной части не окажутся на своих местах. 

// Пирамидальная сортировка (сортировка кучей). Алгоритм выстраивает данные в виде двоичного дерева (двоичной кучи). 
// Наибольший или наименьший элемент (в зависимости от типа) располагается в корне дерева. Он меняется местами с последним элементом кучи и помещается в конец массива. 

// Сортировка слиянием. Массив данных разделяется на равные части, которые сортируются по-отдельности. После они сливаются, в результате получается отсортированный массив.


// 2. Создать объект Person несколькими способами, после создать объект AnotherPerson, чтобы в нём были
//доступны методы объекта Person. Добавить метод logInfo чтоб он был доступен всем объектам.

let person1 = {
    id: 1,
    name: 'Nastya',
    age: 26
}

let person2 = new Object({
    id: 1,
    name: 'Nastya',
    age: 26
})

let anotherPerson = {
    id: 2, 
    name: 'Yury',
    age: 25, 
    __proto__: person1
}

person1.logInfo = function() {
    return `Name: ${this.name}. Age: ${this.age}.`;
}

Object.defineProperty(person1, 'logInfo', {
    value: function() {
        return `Name: ${this.name}. Age: ${this.age}.`;
    },
    configurable: true,
});

Object.prototype.logInfo = function() {
    return `Name: ${this.name}. Age: ${this.age}.`;
}

//3. Создать класс SuperPerson c get и set для поля name и конструктором , сделать класс наследник от
//класса SuperPerson.

class SuperPerson {
    constructor(name) {
        this.name = name;
    }

    get name() {
        return this.name;
    }
    
    set name(value) {
        this.name = value;
    }
}

class Person extends SuperPerson {
    constructor(name) {
        super(name);
    }
    
    logInfo() {
        return `Name: ${this.name}`;
    }
}


